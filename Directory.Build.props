<Project>

    <!-- Framework properties -->
    <PropertyGroup>
        <LangVersion>12</LangVersion>
        <Version>1.8.0.0</Version>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <Prefer32Bit>false</Prefer32Bit>
        <DebugType>embedded</DebugType>
        <Nullable>disable</Nullable>
        <ImplicitUsings>disable</ImplicitUsings>
        <PathMap>$(MSBuildProjectDirectory)=$(MSBuildProjectName)</PathMap>
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <AccelerateBuildsInVisualStudio>false</AccelerateBuildsInVisualStudio>
    </PropertyGroup>

    <!-- Nitrox specific properties -->
    <PropertyGroup>
        <!-- Fix for dotnet build CLI ; MSBuildThisFileDirectory refers to the folder where Directory.Build.props is defined -->
        <NitroxRootDir>$(MSBuildThisFileDirectory)</NitroxRootDir>
        <NitroxProject>false</NitroxProject>
        <TestLibrary>false</TestLibrary>
        <NitroxLibrary>false</NitroxLibrary>
        <UnityModLibrary>false</UnityModLibrary>
        <BuildToolDir>$(NitroxRootDir)Nitrox.BuildTool\bin\</BuildToolDir>
        <BuildGenDir>$(BuildToolDir)generated_files\</BuildGenDir>
        <BuildGenDllDir>$(BuildGenDir)publicized_assemblies\</BuildGenDllDir>
        <!-- Will be defined by game.props generated by BuildTool-->
        <GameManagedDir></GameManagedDir>
    </PropertyGroup>

    <PropertyGroup Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(MSBuildProjectName), '^Nitrox.*$'))">
        <NitroxProject>true</NitroxProject>
    </PropertyGroup>
    <PropertyGroup Condition="'$(NitroxProject)' == 'true' and '$(MSBuildProjectName)' != 'Nitrox.Test'">
        <NitroxLibrary>true</NitroxLibrary>
    </PropertyGroup>
    <PropertyGroup Condition="'$(NitroxLibrary)' == 'true' and '$(MSBuildProjectName)' != 'NitroxModel' and '$(MSBuildProjectName)' != 'NitroxServer' and '$(MSBuildProjectName)' != 'Nitrox.BuildTool' and '$(MSBuildProjectName)' != 'Nitrox.Launcher'">
        <UnityModLibrary>true</UnityModLibrary>
    </PropertyGroup>
    <PropertyGroup Condition="'$(MSBuildProjectName)' == 'Nitrox.Test'">
        <TestLibrary>true</TestLibrary>
    </PropertyGroup>

    <!-- Shared dependencies for all Nitrox.* projects -->
    <ItemGroup Condition="'$(NitroxProject)' == 'true'">
        <PackageReference Include="JetBrains.Annotations" Version="2024.2.0">
            <Aliases>JB</Aliases>
        </PackageReference>

        <PackageReference Include="IsExternalInit" Version="1.0.3">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>

        <PackageReference Include="IndexRange" Version="1.0.3" />

        <PackageReference Include="System.Memory" Version="4.5.5" />
        <PackageReference Include="System.ValueTuple" Version="4.5.0" />
    </ItemGroup>

    <ItemGroup Condition="'$(UnityModLibrary)' == 'true'">
        <!-- TODO : Find a way to remove this project reference -->
        <!-- Require other Nitrox projects (that need game DLLs) to wait on BuildTool. -->
        <ProjectReference Include="$(NitroxRootDir)Nitrox.BuildTool\Nitrox.BuildTool.csproj">
            <Name>Nitrox.BuildTool</Name>
            <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
            <SetTargetFramework>TargetFramework=netstandard2.0</SetTargetFramework>
        </ProjectReference>

        <PackageReference Include="Nitrox.Analyzers" Version="*">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>

    <!-- Set internals visible for all projects for Nitrox.Test (excluding Nitrox.Test itself) -->
    <Choose>
        <When Condition="'$(NitroxLibrary)' == 'true'">
            <ItemGroup>
                <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
                    <_Parameter1>Nitrox.Test</_Parameter1>
                </AssemblyAttribute>
            </ItemGroup>
        </When>
    </Choose>

    <!-- Tell developer that it needs to build the Nitrox.BuildTool to fetch the game assemblies.
    "dotnet restore" should still be allowed to run to fetch NuGet packages -->
    <Target Name="PrepareForModding" AfterTargets="Restore;BeforeResolveReferences" Condition="'$(UnityModLibrary)' == 'true' and !Exists('$(BuildGenDir)publicized_assemblies')">
        <Error Text="Run the Nitrox.BuildTool project (to fetch the assemblies) before building other Nitrox projects." />
    </Target>

    <!-- Include generated build properties. -->
    <Import Project="$(BuildGenDir)game.props" Condition="Exists('$(BuildGenDir)game.props')"/>
</Project>
