using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using NitroxModel.DataStructures;
using NitroxModel.DataStructures.GameLogic;
using NitroxModel.DataStructures.Unity;
using NitroxModel.Networking;
using NitroxModel.Server;

namespace Nitrox.Server.Subnautica.Database.Models;

// TODO: Add password field to let users authorize (i.e. start play session) with this player data. The password should be auto generated by server and passed to the client. Client should remember to send it when joining the server or new player data should be created.

/// <summary>
///     The player model that clients can assume on join. This data is kept even after server shuts down.
/// </summary>
/// <remarks>
///     Use <see cref="PlayerSession" /> and dependant tables if data should be discarded when player disconnects (or when
///     server stops).
/// </remarks>
[Table("Players")]
public record Player
{
    /// <summary>
    ///     Primary key in the database.
    /// </summary>
    public PeerId Id { get; set; }

    /// <summary>
    ///     Name of the player as it was provided by the player on join.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    ///     Permissions as granted by the server. Defaults to <see cref="Perms.DEFAULT" />.
    /// </summary>
    public Perms Permissions { get; set; }

    /// <summary>
    ///     The game mode this player is playing in. Can be different for other players in the same world.
    /// </summary>
    public SubnauticaGameMode GameMode { get; set; }

    /// <summary>
    ///     If true, player will have to start over when they die.
    /// </summary>
    public bool IsPermaDeath { get; set; }

    /// <summary>
    ///     If true, player cannot chat with other players.
    /// </summary>
    public bool IsMuted { get; set; }

    /// <summary>
    ///     Saved position to get back to. Used as spawn position on join or to go back to when player dies.
    /// </summary>
    public required NitroxVector3? SavedPosition { get; set; }

    /// <summary>
    ///     Saved SubRootId to go back to when stuck or when spawning.
    /// </summary>
    public required NitroxId SavedSubRootID { get; set; }

    /// <summary>
    ///     The real-world time when the player first started playing on the server.
    /// </summary>
    [Required]
    public DateTimeOffset Created { get; set; } = DateTimeOffset.Now;

    // TODO: Store this
    // public List<NitroxTechType> UsedItems { get; set; } = [];
    // public Optional<NitroxId>[] QuickSlotsBindingIds { get; set; } = [];
    // public Dictionary<string, NitroxId> EquippedItems { get; set; } = [];
    // public NitroxVector3 SpawnPosition { get; set; }
    // public NitroxQuaternion SpawnRotation { get; set; }
    // /// <summary>
    // ///     Gets the survival stats of the player in the game world.
    // /// </summary>
    // public PlayerStats PlayerStats { get; set; }
    // /// <summary>
    // ///     Synchronization id of the player object in the Subnautica world.
    // /// </summary>
    // public NitroxId NitroxId { get; set; }
    // /// <summary>
    // ///     Synchronization id of the structure the player has entered.
    // /// </summary>
    // /// <remarks>
    // ///     Subnautica uses <c>SubRoot</c> terminology for any interior the player can enter (like cyclops, seamoth or player
    // ///     bases).
    // /// </remarks>
    // public NitroxId SubRootId { get; set; }
}
